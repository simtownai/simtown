name: Build and Deploy

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run format check
        run: bun run format:check

      - name: Build Docker image
        run: docker build --build-arg NODE_ENV=production -t simtown:latest .

      - name: Copy client build artifacts from Docker image
        run: |
          docker create --name temp simtown:latest
          docker cp temp:/app/dist ./dist
          docker rm temp

      - name: Upload client artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to registry
        run: |
          docker tag simtown:latest ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

  deploy-client:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Deployment for Client
        uses: chrnorm/deployment-action@v2
        id: deployment-client
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          environment: client-production
          description: "Deploying client to production environment"
          initial-status: in_progress

      - name: Download client artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "dist/*"
          target: "/tmp/simtown"

      - name: Replace target files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          command_timeout: "60m"
          script: |
            set -x
            TARGET_DIR="/usr/share/nginx/app.simtown.ai/html"

            sudo rm -rf $TARGET_DIR/*
            sudo mkdir -p $TARGET_DIR
            sudo mv /tmp/simtown/dist/* $TARGET_DIR/
            sudo rm -rf /tmp/simtown

      - name: Update client deployment status (success)
        if: ${{ success() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          deployment-id: ${{ steps.deployment-client.outputs.deployment_id }}
          state: "success"
          environment-url: https://app.simtown.ai/

      - name: Update client deployment status (failure)
        if: ${{ failure() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          deployment-id: ${{ steps.deployment-client.outputs.deployment_id }}
          state: "failure"

  deploy-server:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Deployment for Server
        uses: chrnorm/deployment-action@v2
        id: deployment-server
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          environment: server-production
          description: "Deploying server to production environment"
          initial-status: in_progress

      - name: Check out code
        uses: actions/checkout@v4

      - name: Deploy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "docker-compose.yml"
          target: "/${{ secrets.USERNAME }}/simtown/"

      - name: Deploy server using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          command_timeout: "60m"
          script: |
            set -x
            cd /${{ secrets.USERNAME }}/simtown/
            echo "IMAGE_NAME=ghcr.io/${{ github.repository }}:latest" > .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose pull
            docker-compose up -d
            docker system prune --all --force

      - name: Update server deployment status (success)
        if: ${{ success() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          deployment-id: ${{ steps.deployment-server.outputs.deployment_id }}
          state: "success"
          environment-url: https://api.simtown.ai/

      - name: Update server deployment status (failure)
        if: ${{ failure() }}
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          deployment-id: ${{ steps.deployment-server.outputs.deployment_id }}
          state: "failure"
